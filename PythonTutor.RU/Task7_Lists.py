# -*- coding: utf-8 -*-

# Задача «Четные индексы»
"""
Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...).
"""

a = input().split()
for i in range(0, len(a), 2):
    print(a[i])

# Задача «Четные элементы»
"""
Выведите все четные элементы списка. При этом используйте цикл for, перебирающий элементы 
списка, а не их индексы!
"""

a = input().split()
for i in range(len(a)):
    if int(a[i]) % 2 == 0:
        print(a[i])

# Задача «Больше предыдущего»
"""
Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.
"""

a = input().split()
for i in range(len(a) - 1):
    if int(a[i + 1]) > int(a[i]):
        print(a[i + 1])

# Задача «Соседи одного знака»
"""
Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. 
Если соседних элементов одного знака нет — не выводите ничего. Если таких пар соседей 
несколько — выведите первую пару.
"""

a = input().split()
for i in range(len(a) - 1):
    if a[i + 1].find('-') and a[i].find('-') or  not a[i + 1].find("-") and not a[i].find("-"):
        print(a[i], a[i + 1])
        break

# Задача «Больше своих соседей»
"""
Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей, 
и выведите количество таких элементов. Крайние элементы списка никогда не учитываются, поскольку 
у них недостаточно соседей.
"""

a = input().split()
t = 0
for i in range(len(a) - 2):
    if int(a[i + 1]) > int(a[i]) and int(a[i + 1]) > int(a[i + 2]):
        t += 1
print(t)

# Задача «Наибольший элемент»
"""
Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в 
списке. Если наибольших элементов несколько, выведите индекс первого из них.
"""

index_of_max = 0
a = [int(i) for i in input().split()]
for i in range(1, len(a)):
    if a[i] > a[index_of_max]:
        index_of_max = i
print(a[index_of_max], index_of_max)

# Задача «Шеренга»
"""
Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. 
Помогите ему это сделать.
Программа получает на вход невозрастающую последовательность натуральных чисел, означающих рост 
каждого человека в строю. После этого вводится число X – рост Пети. Все числа во входных данных 
натуральные и не превышают 200.
Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, 
таким же, как у Пети, то он должен встать после них.
"""

a = [int(i) for i in input().split()]
x = int(input())
pos = 0
while pos < len(a) and a[pos] >= x:
    pos += 1
print(pos + 1)

# Задача «Количество различных элементов»
"""
Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.
"""

a = [int(i) for i in input().split()]
q = 1
for i in range(0, len(a) - 1):
    if a[i] != a[i + 1]:
        q += 1
print(q)

# Задача «Переставить соседние»
"""
Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т. д.). Если элементов нечетное число, 
то последний элемент остается на своем месте.
"""

a = [int(i) for i in input().split()]
for i in range(0, len(a) - 1, 2):
    a[i], a[i + 1] = a[i + 1], a[i]
print(' '.join([str(i) for i in a]))

# Задача «Переставить min и max»
"""
В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка.
"""

a = [int(s) for s in input().split()]
index_of_min = 0
index_of_max = 0
for i in range(1, len(a)):
    if a[i] > a[index_of_max]:
        index_of_max = i
    if a[i] < a[index_of_min]:
        index_of_min = i
a[index_of_min], a[index_of_max] = a[index_of_max], a[index_of_min]
print(' '.join([str(i) for i in a]))

# Задача «Удалить элемент»
"""
Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k, сдвинув влево 
все элементы, стоящие правее элемента с индексом k.
Программа получает на вход список, затем число k. Программа сдвигает все элементы, а после этого удаляет 
последний элемент списка при помощи метода pop() без параметров.
Программа должна осуществлять сдвиг непосредственно в списке, а не делать это при выводе элементов. Также 
нельзя использовать дополнительный список. Также не следует использовать метод pop(k) с параметром.
"""

list = [int(s) for s in input().split()]
k = int(input())
del list[k]
print(' '.join([str(i) for i in list]))

# Задача «Вставить элемент»
"""
Дан список целых чисел, число k и значение C. Необходимо вставить в список на позицию с индексом k элемент, 
равный C, сдвинув все элементы, имевшие индекс не менее k, вправо.
Поскольку при этом количество элементов в списке увеличивается, после считывания списка в его конец нужно 
будет добавить новый элемент, используя метод append.
Вставку необходимо осуществлять уже в считанном списке, не делая этого при выводе и не создавая дополнительного 
списка.
"""

list = [int(s) for s in input().split()]
K = [int(s) for s in input().split()]
k = K[0]
C = K[1]
list.insert(k, C)
print(' '.join([str(i) for i in list]))

# Задача «Количество совпадающих пар»
"""
Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые два элемента, 
равные друг другу образуют одну пару, которую необходимо посчитать.
"""

list = [int(s) for s in input().split()]
k = 0
for i in range(len(list)):
    for j in range(i + 1, len(list)):
        if list[i] == list[j]:
            k += 1
print(k)

# Задача «Уникальные элементы»
"""
Дан список. Выведите те его элементы, которые встречаются в списке только один раз. Элементы нужно выводить в том 
порядке, в котором они встречаются в списке.
"""

list = [int(s) for s in input().split()]
for i in range(len(list)):
    for j in range(len(list)):
        if i != j and list[i] == list[j]:
            break
    else:
        print(list[i], end=' ')

# Задача «Кегельбан»
"""
N кеглей выставили в один ряд, занумеровав их слева направо числами от 1 до N. Затем по этому ряду бросили K шаров, 
при этом i-й шар сбил все кегли с номерами от li до ri включительно. Определите, какие кегли остались стоять на месте.
Программа получает на вход количество кеглей N и количество бросков K. Далее идет K пар чисел li, ri, при этом 
1≤ li≤ ri≤ N.
Программа должна вывести последовательность из N символов, где j-й символ есть “I”, если j-я кегля осталась стоять, 
или “.”, если j-я кегля была сбита.
"""

n, k = [int(s) for s in input().split()]
bahn = ['I'] * n
for i in range(k):
    left, right = [int(s) for s in input().split()]
    for j in range(left - 1, right):
        bahn[j] = '.'
print(''.join(bahn))

# Задача «Ферзи»
"""
Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга. Вам дана расстановка 8 ферзей 
на доске, определите, есть ли среди них пара бьющих друг друга.
Программа получает на вход восемь пар чисел, каждое число от 1 до 8 — координаты 8 ферзей. Если ферзи не бьют друг 
друга, выведите слово NO, иначе выведите YES.
"""

n = 8
x = []
y = []
for i in range(n):
    new_x, new_y = [int(s) for s in input().split()]
    x.append(new_x)
    y.append(new_y)

correct = True
for i in range(n):
    for j in range(i + 1, n):
        if x[i] == x[j] or y[i] == y[j] or abs(x[i] - x[j]) == abs(y[i] - y[j]):
            correct = False

if correct:
    print('NO')
else:
    print('YES')
